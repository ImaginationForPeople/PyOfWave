Gadget API
----------

Job: A minimal API for gadget developers to use and wave clients to implement.
Existing Standards: ECMAScript (a.k.a. JavaScript), W3C JavaScript API (derived), W3C URL

Format
------

Gadgets are programmed in ECMAScript, using a superset of the browser JavaScript APIs with links blocked and requests confirmed by the user.

The gadgets are embedded in waves as attachments (linked in via a URL).

Conceptual
----------

Gadgets are included in Wave as an extension point, thereby providing more flexible usage. Conceptually they are mini-applications with shared state which use the participant information of the wave (more specifically post) which it's embedded in.

In order to decrease size of gadget implementations and gadgets themselves (and ease gadget creation), this standard will embrace that by their very nature gadgets are RIAs (Rich Internet Applications). This means they are highly interactive, and such systems are best programmed in JavaScript. For this reason this standard only supports JavaScript, thereby avoiding the verbage of HTML in RIAs. It will also provide additional functions as utilities.

KVO (Key Value Observing) APIs will be provided (which can accomadate assignment in browser using a number of short lasting get/set syntax) to simplify the live state APIs and as a utility. KVO would be a nice component since it helps deal with changing data.

Users should be confident in the privacy of the data given to gadgets, so requests should be confirmed or blocked (except for resource loading). 

Security
--------

As a recommendation:

- Tags acting as links should be blocked, as for *window.location* methods.
	This removes usefulness of *window.history*, which may be left out 
	of implementations.

- *window.open* calls should be intercepted by a confirmation screen.

- *XMLHttpRequest* requests should be confirmed with a "remember this choice" option. 

- *load* calls should only accept literal strings.

This ensures users are confident their data private and happier with sharing with other users.

APIs
----

This section documents additional APIs to the W3C JavaScript APIs. CoffeeScript-style parameters (... after parameter means that it takes all arguments after it, = indicates a default value). CoffeeScript is not standardized, but an overview is in the https://github.com/pyofwave/PyOfWave repository.

DOM utils:
- load(MIMEtype = "", urls...)

KVO:

State: